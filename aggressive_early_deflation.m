%Aggressive early deflation method
%input:A dense matrix A, flag for hessenberg decompesition
%output:E,Q,H
function [E,Q,H]=aggressive_early_deflation(A,flag)
    [n,~]=size(A);
    D=zeros(n,2);
    E=zeros(n,1);
    H=A;
    Q=eye(n);
    if flag==1
        %[Q,H]=hessenberg(H);
        [Q,H]=hess(H);
    end
    i=1;
    m=n;
    tol1=1e-15;
    tol2=1e-15;
    %some_eigenvalue=H(2:1,1:2);
    while(m-i+1>100)
        [W0,H(i:m,i:m),lpa,k,tense,least]=double_shift_chasing_iteration(H(i:m,i:m));
        %some_eigenvalue=H(2:1,1:2);
        position2=i+3*lpa;
        size_l=3*lpa+1;
        Q(1:n,i:position2)=Q(1:n,i:i+3*lpa)*W0(1:size_l,1:size_l,1);
        H(1:i-1,i:position2)=H(1:i-1,i:position2)*W0(1:size_l,1:size_l,1);
        H(i:position2,m+1:n)=W0(1:size_l,1:size_l,1)'*H(i:position2,m+1:n);
        size_l=3*lpa+k+1;
        for laps=2:tense+1
            position1=i+(laps-2)*k;
            position2=3*lpa+(laps-1)*k+i;
            Q(1:n,position1:position2)=Q(1:n,position1:position2)*W0(1:size_l,1:size_l,laps);
            H(1:i-1,position1:position2)=H(1:i-1,position1:position2)*W0(1:size_l,1:size_l,laps);
            H(position1:position2,m+1:n)=W0(1:size_l,1:size_l,laps)'*H(position1:position2,m+1:n);
        end
        position1=m-(3*lpa+least);
        size_l=1+3*lpa+least;
        Q(1:n,position1:m)=Q(1:n,position1:m)*W0(1:size_l,1:size_l,tense+2);
        H(1:i-1,position1:m)=H(1:i-1,position1:m)*W0(1:size_l,1:size_l,tense+2);
        H(position1:m,m+1:n)=W0(1:size_l,1:size_l,tense+2)'*H(position1:m,m+1:n);
        position1=m-3*lpa;
        size_l=1+3*lpa;
        Q(1:n,position1:m)=Q(1:n,position1:m)*W0(1:size_l,1:size_l,tense+3);
        H(1:i-1,position1:m)=H(1:i-1,position1:m)*W0(1:size_l,1:size_l,tense+3);
        H(position1:m,m+1:n)=W0(1:size_l,1:size_l,tense+3)'*H(position1:m,m+1:n);
        if abs(H(i+1,i))<tol1
            H(i+1,i)=0;
            D(i,1)=H(i,i);
            i=i+1;
        else
            if abs(H(i+2,i+1))<tol1
                H(i+2,i+1)=0;
                t=H(i,i)+H(i+1,i+1);
                s=H(i,i)*H(i+1,i+1)-H(i,i+1)*H(i+1,i);
                delta=t^2-4*s;
                if(delta>=0)
                    D(i,1)=(t+sqrt(abs(delta)))/2;
                    D(i+1,1)=(t-sqrt(abs(delta)))/2;
                else
                    D(i,1)=t/2;
                    D(i+1,1)=D(i,1);
                    D(i+1,2)=sqrt(abs(delta))/2;
                    D(i,2)=-D(i+1,2);
                end
                i=i+2;
            end
        end
        [~,Q0,temp_matrix]=aggressive_early_deflation(H(m-3*lpa+1:m,m-3*lpa+1:m),1);
        %[Q0,temp_matrix]=schur(H(m-3*lpa+1:m,m-3*lpa+1:m));
        temp_vector=Q0'*H(m-3*lpa+1:m,m-3*lpa);
        ava=0;
        while(ava~=3*lpa&&abs(temp_vector(3*lpa-ava,1))<tol2)
            temp_vector(3*lpa-ava,1)=0;
            ava=ava+1;
        end
        if(ava==0)
            continue;
        else
            if(ava~=3*lpa&&temp_matrix(3*lpa-ava+1,3*lpa-ava)~=0)
            temp_vector(3*lpa-ava,1)=0;
            ava=ava+1;
            end
            if(ava<lpa)
                continue;
            else
                H(m-3*lpa+1:m,m-3*lpa+1:m)=temp_matrix;
                H(m-3*lpa+1:m,m-3*lpa)=temp_vector;
                D(m-ava+1:m,1:2)=eig_search(H(m-ava+1:m,m-ava+1:m));
                %some_eigenvalue=eig_search(H(m-3*lpa+1:m-ava,m-3*lpa+1:m-ava));
                Q(1:n,m-3*lpa+1:m)=Q(1:n,m-3*lpa+1:m)*Q0;
                H(1:m-3*lpa,m-3*lpa+1:m)=H(1:m-3*lpa,m-3*lpa+1:m)*Q0;
                H(m-3*lpa+1:m,m+1:n)=Q0'*H(m-3*lpa+1:m,m+1:n);
                %[Q0,H(m-3*lpa:m-ava,m-3*lpa:m-ava)]=hessenberg(H(m-3*lpa:m-ava,m-3*lpa:m-ava));
                [Q0,H(m-3*lpa:m-ava,m-3*lpa:m-ava)]=hess(H(m-3*lpa:m-ava,m-3*lpa:m-ava));
                Q(1:n,m-3*lpa:m-ava)=Q(1:n,m-3*lpa:m-ava)*Q0;
                H(1:m-3*lpa-1,m-3*lpa:m-ava)=H(1:m-3*lpa-1,m-3*lpa:m-ava)*Q0;
                H(m-3*lpa:m-ava,m-ava+1:n)=Q0'*H(m-3*lpa:m-ava,m-ava+1:n);
                m=m-ava;
            end
        end
    end
    [E0,H(i:m,i:m),Q0]=sextuple_shift_QR_algorithm(H(i:m,i:m),0);
    D(i:m,1)=real(E0);
    D(i:m,2)=imag(E0);
    Q(1:n,i:m)=Q(1:n,i:m)*Q0;
    H(1:i-1,i:m)=H(1:i-1,i:m)*Q0;
    H(i:m,m+1:n)=Q0'*H(i:m,m+1:n);
    E(1:n)=D(1:n,1)+1i*D(1:n,2);
end